<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="PlanningCategoryItemDao">
	<!--企划-坑位信息
	创建人：lxl
	邮箱：lxl.fml@gmail.com
	创建时间：2023-3-31 13:47:40
	版本号：1.0
-->
	<!-- *******************************************自定义方法区  不替换的区域【other_start】***************************************** -->


	<!-- *******************************************自定义方法区 【other_end】***************************************** -->
	<!-- *******************************************公用方法区(不可修改)***************************************** -->
	<!-- 公用返回值 与数据库字段保持一致即可，同时实体(驼峰命名)必须包含所有字段 -->
	<sql id="base_column">
		id,company_code,planning_season_id,planning_band_id,planning_category_id,style_pic,design_no,category_id,category_name,category_ids,price,his_design_no
	</sql>
	<!--  方法返回：成功条数。     方法名称： 新增          方法参数：list集合 -->
	<insert id="insert" parameterType="java.util.List">
		insert into t_planning_category_item (
		<include refid="base_column"/>
		) values
		<foreach collection="list" item="t" index="index" separator=",">
			(  #{t.id,jdbcType=VARCHAR},#{t.companyCode,jdbcType=VARCHAR},#{t.planningSeasonId,jdbcType=VARCHAR},#{t.planningBandId,jdbcType=VARCHAR},#{t.planningCategoryId,jdbcType=VARCHAR},#{t.stylePic,jdbcType=VARCHAR},#{t.designNo,jdbcType=VARCHAR},#{t.categoryId,jdbcType=VARCHAR},#{t.categoryName,jdbcType=VARCHAR},#{t.categoryIds,jdbcType=VARCHAR},#{t.price,jdbcType=VARCHAR},#{t.hisDesignNo,jdbcType=VARCHAR}
			)
		</foreach>
	</insert>
	<!--
        方法返回：成功条数。
        方法名称： 按list更新
        方法参数：list集合，id不为空，其他字段为空也修改，使用场景一般先查询  或更改明细的几个字段
    -->
	<update id="updateList" parameterType="java.util.List">
		<foreach collection="list" item="t" index="index" separator=";">
			update t_planning_category_item
			<set>
					id = #{t.id,jdbcType=VARCHAR},
					company_code = #{t.companyCode,jdbcType=VARCHAR},
					planning_season_id = #{t.planningSeasonId,jdbcType=VARCHAR},
					planning_band_id = #{t.planningBandId,jdbcType=VARCHAR},
					planning_category_id = #{t.planningCategoryId,jdbcType=VARCHAR},
					style_pic = #{t.stylePic,jdbcType=VARCHAR},
					design_no = #{t.designNo,jdbcType=VARCHAR},
					category_id = #{t.categoryId,jdbcType=VARCHAR},
					category_name = #{t.categoryName,jdbcType=VARCHAR},
					category_ids = #{t.categoryIds,jdbcType=VARCHAR},
					price = #{t.price,jdbcType=VARCHAR},
					his_design_no = #{t.hisDesignNo,jdbcType=VARCHAR},
			</set>
			where id = #{t.id,jdbcType=BIGINT}

		</foreach>
	</update>

	<!--
        方法名称： 按条件更新
        方法参数：条件构造器（构造器中T对象所有不为空属性为修改后的值）。
        方法返回：成功条数。
    -->
	<update id="update" parameterType="queryCondition">
		update t_planning_category_item
		<set>
				<if test="t.id != null">
					id = #{t.id
					,jdbcType=VARCHAR},
				</if>
				<if test="t.companyCode != null">
					company_code = #{t.companyCode
					,jdbcType=VARCHAR},
				</if>
				<if test="t.planningSeasonId != null">
					planning_season_id = #{t.planningSeasonId
					,jdbcType=VARCHAR},
				</if>
				<if test="t.planningBandId != null">
					planning_band_id = #{t.planningBandId
					,jdbcType=VARCHAR},
				</if>
				<if test="t.planningCategoryId != null">
					planning_category_id = #{t.planningCategoryId
					,jdbcType=VARCHAR},
				</if>
				<if test="t.stylePic != null">
					style_pic = #{t.stylePic
					,jdbcType=VARCHAR},
				</if>
				<if test="t.designNo != null">
					design_no = #{t.designNo
					,jdbcType=VARCHAR},
				</if>
				<if test="t.categoryId != null">
					category_id = #{t.categoryId
					,jdbcType=VARCHAR},
				</if>
				<if test="t.categoryName != null">
					category_name = #{t.categoryName
					,jdbcType=VARCHAR},
				</if>
				<if test="t.categoryIds != null">
					category_ids = #{t.categoryIds
					,jdbcType=VARCHAR},
				</if>
				<if test="t.price != null">
					price = #{t.price
					,jdbcType=VARCHAR},
				</if>
				<if test="t.hisDesignNo != null">
					his_design_no = #{t.hisDesignNo
					,jdbcType=VARCHAR},
				</if>
		</set>
		<include refid="common.whereClause"></include>
	</update>

	<!--
        方法名称： 按条件删除
        方法参数：条件构造器。
        方法返回：成功条数。
    -->
	<delete id="delete" parameterType="queryCondition">
		delete from t_planning_category_item
		<include refid="common.whereClause"></include>
	</delete>

	<select id="selectCount" resultType="java.lang.Integer" parameterType="queryCondition">
		select  count(${countByClause})
		<include refid="base_column"/>
		from t_planning_category_item
		<include refid="common.whereClause"></include>
		<if test="groupByClause != null">
			group by ${groupByClause}
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>

	<!--
        方法名称： 按条件查询
        方法参数：条件构造器(可分组和排序)。
        方法返回：返回单个对象或集合。
    -->
	<select id="select" resultType="com.base.sbc.pdm.entity.PlanningCategoryItem" parameterType="queryCondition">
		select <include refid="base_column"/> from t_planning_category_item
		<include refid="common.whereClause"></include>
		<if test="groupByClause != null">
			group by ${groupByClause}
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
</mapper>

<!-- /******************************************************************************
 * Copyright (C) 2018 广州尚捷科技有限责任公司
 * All Rights Reserved.
 * 本软件为公司：广州尚捷科技有限责任公司   开发研制。未经本站正式书面同意，其他任何个人、团体
 * 不得使用、复制、修改或发布本软件.
 ***************************************************************************** -->

